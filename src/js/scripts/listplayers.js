import { initializeApp } from 'firebase/app';
import { getFirestore, collection, doc, deleteDoc, getDocs, getDoc } from "firebase/firestore";
import { getAuth, onAuthStateChanged } from 'firebase/auth';
import { fbConfigStuff } from './config.js';

// firebase shit
let fbConfig = fbConfigStuff();
let app = initializeApp(fbConfig);
let db = getFirestore(app);
let auth = getAuth();

// grab DOM elements
let primaryName = document.querySelector('.item-primary-name');
let regularSection = document.querySelector('.items');
let primarySection = document.querySelector('.item-primary');
let successModal = document.querySelector('.success');
let successModalText = document.querySelector('.success-text');
let successModalButton = document.querySelector('.success-button');

// initialize
let playerListData = [];

(() => {
  'use strict';

  let listPlayers = {

    init() {
      onAuthStateChanged(auth, async (user) => {

        if (user) {
          let fbUserID = user.uid;
          
            // initialize playerList fb reference
          let playerListRef = collection(db, 'players', fbUserID, "playerList");
    
          // get the playerList sub-collection referenced above
          let queryPlayersList = await getDocs(playerListRef);
  
          // this both converts firestore data to an in-house js object
          // and gets rid of any dummy documents generated by firestore
          queryPlayersList.forEach((doc) => {
            if (Object.keys(doc.data()).length > 0) {
              playerListData.push(doc.data());
            };
          });
  
          // get the app owner/primary player
          let primarySnap = await(getDoc(doc(db, 'players', fbUserID)));
          let primaryObject = primarySnap.data();
  
          // inject owner name into DOM
          primaryName.innerText = `${primaryObject.nameFirst} ${primaryObject.nameLast}`;
  
          listPlayers.buildDOMList(playerListData, fbUserID);
          
        } else {

          // get rid of the incoming data heads up
          primarySection.remove();
          regularSection.innerHTML = `
          <p>Nothing's going to display as you need to either:</p>
          <a href="/">Sign Up or Log In ➤</a>
          `;
        };
      }); // end onAuthChanged
      
    }, // end init()

    buildDOMList(playerListData, fbUserID) {
      // testing if
      if (playerListData.length == 0) {
        regularSection.innerHTML = `
        <p>You do not have any players created yet :(</p>
        <a href="/pages/createplayer.html" class="items-none">Create One Here ➤</a>`
      } else {
        playerListData.forEach(player => {
          regularSection.innerHTML += `
          <player-card class="item" data-playerID="${player.playerID}">
            <p class="item-name">${player.nameFirst} ${player.nameLast}</p>
            <svg xmlns="http://www.w3.org/2000/svg" class="delete-me" viewbox="0 0 875 1000" width="27" height="50" >
              <path d="M0 281.296v-68.355q1.953-37.107 29.295-62.496t64.449-25.389h93.744V93.808q0-39.06 27.342-66.402T281.232.064h312.48q39.06 0 66.402 27.342t27.342 66.402v31.248H781.2q37.107 0 64.449 25.389t29.295 62.496v68.355q0 25.389-18.553 43.943t-43.943 18.553v531.216q0 52.731-36.13 88.862T687.456 1000H187.488q-52.731 0-88.862-36.13t-36.13-88.862V343.792q-25.389 0-43.943-18.553T0 281.296zm62.496 0h749.952V218.8q0-13.671-8.789-22.46t-22.46-8.789H93.743q-13.671 0-22.46 8.789t-8.789 22.46v62.496zm62.496 593.712q0 25.389 18.553 43.943t43.943 18.553h499.968q25.389 0 43.943-18.553t18.553-43.943V343.792h-624.96v531.216zm62.496-31.248V437.536q0-13.671 8.789-22.46t22.46-8.789h62.496q13.671 0 22.46 8.789t8.789 22.46V843.76q0 13.671-8.789 22.46t-22.46 8.789h-62.496q-13.671 0-22.46-8.789t-8.789-22.46zm31.248 0h62.496V437.536h-62.496V843.76zm31.248-718.704H624.96V93.808q0-13.671-8.789-22.46t-22.46-8.789h-312.48q-13.671 0-22.46 8.789t-8.789 22.46v31.248zM374.976 843.76V437.536q0-13.671 8.789-22.46t22.46-8.789h62.496q13.671 0 22.46 8.789t8.789 22.46V843.76q0 13.671-8.789 22.46t-22.46 8.789h-62.496q-13.671 0-22.46-8.789t-8.789-22.46zm31.248 0h62.496V437.536h-62.496V843.76zm156.24 0V437.536q0-13.671 8.789-22.46t22.46-8.789h62.496q13.671 0 22.46 8.789t8.789 22.46V843.76q0 13.671-8.789 22.46t-22.46 8.789h-62.496q-13.671 0-22.46-8.789t-8.789-22.46zm31.248 0h62.496V437.536h-62.496V843.76z"/>
            </svg>
            <p class="item-delete">Delete Player</p>        
          </player-card>
          `;
        }); // end loop
        
      }

      listPlayers.clickTrashCan(playerListData, fbUserID)
    }, // end buildDOMList()

    clickTrashCan(playerListData, fbUserID) {

      customElements.define('player-card', class extends HTMLElement {
        constructor() {
          super();
        }; // end constructor()

        handleEvent(event) {
          this[`on${event.type}`](event);
        }; // end handleEvent()

        connectedCallback() {
          this.addEventListener('click', this);
        };

        // this is the on${event.type} registered above
        onclick(event) {
          // initialize
          let playerToDeleteID = event.target.closest('player-card').getAttribute('data-playerid');
          let playerCard = event.target.closest('player-card');

          // remove
          playerCard.classList.add('item-remove');
          setTimeout(() => {
            playerCard.remove();
          }, 1000);

          // find player and send along
          let chosenPlayer = playerListData.find(x => x.playerID == playerToDeleteID);
          listPlayers.deleteMe(chosenPlayer, fbUserID);
        }; //end onclick()
      }); // end customElements
    }, // end clickTrashCan()

    async deleteMe(chosenPlayer, fbUserID) {
  
      await deleteDoc(doc(db, 'players', fbUserID, 'playerList', chosenPlayer.playerID));

      listPlayers.successModal(chosenPlayer.nameFirst);
    }, // end deleteMe()

    successModal(chosenName) {
      successModalText.innerText = `${chosenName} has been deleted.`;
      successModal.showModal();

      successModalButton.addEventListener('click', (event) => {
        successModal.close();
      });
    }, // end successModal()
  }; // end listPlayers{}
  listPlayers.init();
})();
