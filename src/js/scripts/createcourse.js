import { initializeApp } from 'firebase/app';
import { getFirestore, collection, getDocs, setDoc, doc } from "firebase/firestore";
import { getAuth, onAuthStateChanged } from 'firebase/auth';
import { fbConfigStuff } from './config.js';

// firebase shit
let fbConfig = fbConfigStuff();
let app = initializeApp(fbConfig);
let db = getFirestore(app);
let auth = getAuth();

// initialize
let courseObject = {};

// grab the DOM elements
let createCourseForm = document.querySelector('.form');
let formResponseSection = document.querySelector('.form-response');
let existsDialog = document.querySelector('.exists');
let existsText = document.querySelector('.exists-text');
let existsDialogButton = document.querySelector('.exists-button');

let successDialog = document.querySelector('.exists');
let successText = document.querySelector('.exists-text');
let successDialogButton = document.querySelector('.exists-button');

let courseData = [];

(() => {
  'use strict';

  let createNewCourse = {

    init() {
      onAuthStateChanged(auth, async (user) => {
        // signOut(auth);
          let fbUserID = user.uid;
      
            // initialize courseList fb reference
            let courseListRef = collection(db, 'players', fbUserID, "courseList");
      
            // get the courseList sub-collection referenced above
            let queryCourseList = await getDocs(courseListRef);
      
            // this both converts firestore data to an in-house js object
            // and gets rid of any dummy documents generated by firestore
            queryCourseList.forEach((doc) => {
              if (Object.keys(doc.data()).length > 0) {
                courseData.push(doc.data());              
              };
            });

            // send data along
            createNewCourse.createCourse(fbUserID, courseData);
      }); // end onAuthChanged
    }, // end init

    createCourse(userID, fbCourseList) {

      formResponseSection.addEventListener('click', (event) => {
        event.preventDefault();
    
        // which button did we click?
        let whichButton = event.target.getAttribute('value');
    
        // first build  the course object
        courseObject.courseName = createCourseForm.querySelector('#coursename').value;
    
        let holeNumbers = createCourseForm.querySelector('input[name="holeradio"]:checked').value;
        let holesLengthNumber = parseInt(holeNumbers, 10);
        courseObject.courseLength = holesLengthNumber;
    
        let newCourseID = Math.random().toString(36).substring(2,11);
        newCourseID.toString();
        courseObject.courseID = newCourseID;
    
        courseObject.roundsScored = 0;
        courseObject.courseCreated = new Date().toLocaleDateString('en-US');
    
        // then build the courseHoles array, i.e. each hole
        let holesArray = [];
        holesArray.length = courseObject.courseLength;
        for (let i = 0; i < holesArray.length; i++) {
          holesArray[i] = {
            holeNumber: 1 + i,
            holePar: 3,
            throwsHole: 0,
            overUnderHole: 0,
            overUnderRound: 0,
            throwsRound: 0
          };
        };
        courseObject.courseHoles = holesArray;
    
        createNewCourse.courseCheck(userID, fbCourseList, courseObject, whichButton);

        createCourseForm.reset();    
      }); // end eventListener    
    }, // end createCourse

    courseCheck(userID, fbCourseList, newCourse, whichButton) {

      // find out if the course already exists
      let foundCourse = fbCourseList.find(x => x.courseName == newCourse.courseName);
    
      if (foundCourse) { // if there is a match, send off for the announcement        
        createNewCourse.alreadyExists(foundCourse);
      } else {
        // or decide what to do with the course object
        // depending on which button we clicked
        switch (whichButton) {
          case 'samepar':
            createNewCourse.newCourseStorage(newCourse, userID);
          break;
          case 'differentpar':
            createNewCourse.goToAdjustPars(newCourse);
          break;
        
          default:
            break;
        };
      };
    }, // end courseCheck

    alreadyExists(foundCourse) {
      existsText.innerHTML = `${foundCourse.courseName} already exists!`;
      existsDialog.showModal();
      existsDialogButton.addEventListener('click', () => {
        existsDialog.close();
      });
    }, // end alreadyExists

    newCourseStorage(newCourse, userID) {
      console.log(newCourse, userID);

      successText.innerHTML = `${newCourse.courseName} has been created!`;
      successDialog.showModal();
      successDialogButton.addEventListener('click', () => {
        existsDialog.close();
      });

      // add document to courseList sub-collection in firestore
      setDoc(doc(db, 'players', userID, 'courseList', newCourse.courseID), newCourse);
    }, // newCourseStorage

    goToAdjustPars(newCourse) {
      // temporarily store here so next page can grab it
      let newCourseJSON = JSON.stringify(newCourse);
      sessionStorage.setItem("course", newCourseJSON);
      setTimeout(() => {
        window.location.href = '/pages/adjustpars.html';
      }, 500);
    } // end goToAdjustPars
  }; // end createNewCourse
  createNewCourse.init();
})();