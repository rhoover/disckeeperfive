import { initializeApp } from 'firebase/app';
import { getFirestore, collection, doc, getDocs, getDoc } from "firebase/firestore";
import { getAuth, onAuthStateChanged } from 'firebase/auth';
import { fbConfigStuff } from './config.js';

// firebase shit
let fbConfig = fbConfigStuff();
let app = initializeApp(fbConfig);
let db = getFirestore(app);
let auth = getAuth();

// initialize
let availablePlayers = [];
let availableCourses = [];
let chosenPlayers = [];

// get DOM elements
// error modal
let noCoursesModal = document.querySelector('.modal-nocourse');
// where to create lists
let insertCoursesHere = document.querySelector('.modal-courses-list');
let insertPlayersHere = document.querySelector('.modal-players-list');
// courses modal
let coursesModal = document.querySelector('.modal-courses');
let coursesFooter = document.querySelector('.modal-courses-footer');
// players modal
let playersModal = document.querySelector('.modal-players');
let playersFooter = document.querySelector('.modal-players-footer');
// success modal
let successDialog = document.querySelector('.modal-success');
//main display buttons
let chooseCourseButton = document.querySelector('[rh-button="courses"]');
let morePlayersButton = document.querySelector('[rh-button="players"]');
let submitButton = document.querySelector('[data-goscore]');
// main display boxes
let courseDisplaySlot = document.querySelector('.selections-course');
let playerDisplaySlot = document.querySelector('.selections-players');
// where to insert error message
let errorMessage = document.querySelector('.selections-course-error');

(() => {
  'use strict';

  let roundSetup = {
    init() {

      onAuthStateChanged(auth, async (user) => {

        let fbUserID = user.uid;

        // get the app owner/primary player
        let primaryQuery = await(getDoc(doc(db, 'players', fbUserID)));
        let primaryPlayerObject = primaryQuery.data();
        // add first name to display
        playerDisplaySlot.innerText = primaryPlayerObject.nameFirst;

        // this both converts firestore data to an in-house js object
        // and gets rid of any dummy documents generated by firestore
        let converter = {
          convert(fetchedArray, availableArray) {
            fetchedArray.forEach((doc) => {
              if (Object.keys(doc.data()).length > 0) {
                availableArray.push(doc.data());
              };
            });
          }
        };

        // get available players to eventually choose freom
        let queryPlayers = await getDocs(collection(db, 'players', fbUserID, 'playerList'));
        converter.convert(queryPlayers, availablePlayers);

        // get available courses to eventually choose from
        let queryCourses = await getDocs(collection(db, 'players', fbUserID, 'courseList'));
        converter.convert(queryCourses, availableCourses);

        // send along
        roundSetup.courseDataCheck(availablePlayers, availableCourses, primaryPlayerObject);
      }); // end authstate

      chooseCourseButton.addEventListener('click', () => {
        coursesModal.showModal();
      });
      morePlayersButton.addEventListener('click', (event) => {
        playersModal.showModal();
      });
    }, //end init()

    courseDataCheck(availablePlayers, availableCourses, primaryPlayerObject) {

      if (availableCourses == null) { // if there are no courses available
        noCoursesModal.showModal();
      } else { // otherwised there are courses available!
        roundSetup.buildCoursesModal(availableCourses);
        roundSetup.buildPlayersModal(availablePlayers, primaryPlayerObject);
      };
    }, // end courseDataCheck

    buildCoursesModal(availableCourses) {
      availableCourses.forEach(function(course) {
        insertCoursesHere.innerHTML += `
          <label class="modal-courses-item">
            ${course.courseName}
            <input type="radio" name="course" value="${course.courseID}" />
          </label>
        `;
      }); // end for loop
      // send it along
      roundSetup.manageCoursesModal(availableCourses);
    }, // end buildCoursesModal

    manageCoursesModal(availableCourses) {

      coursesFooter.addEventListener('click', (event) => {
        // form data collection
        let formCourseData = new FormData(insertCoursesHere);
        let formCourseID = formCourseData.get('course');
        let chosenCourseObject = availableCourses.find(x => x.courseID === formCourseID);

        // which "button" was clicked
        let action = event.target.getAttribute('data-action');
        switch (action) {
          case 'close':
            coursesModal.close();
          break;
          case 'save':

            // add some meta info of the round to course object
            let newRoundID = Math.random().toString(36).substring(2,11);
            newRoundID.toString();
            chosenCourseObject.roundID = newRoundID;
            chosenCourseObject.roundDate = new Date().toLocaleDateString('en-US');

            // then save to localstorage
            localStorage.setItem('chosenCourse', JSON.stringify(chosenCourseObject));
            // console.log(chosenCourseObject);

            // then add to main screen
            courseDisplaySlot.innerHTML = `${chosenCourseObject.courseName}`;
            // then remove error message if it's visible
            let errorShow = document.querySelector('.selections-course-error');
            errorShow.classList.remove('selections-course-error-show');

            // then close modal
            coursesModal.close();
          break;
        
          default:
            break;
        };
      }); // end eventListener()
    }, // end manageCoursesModal()

    buildPlayersModal(availablePlayers, primaryPlayerObject) {

      // let primaryPlayer = availablePlayers.find(x => x.primary == true);

      // build the list
      availablePlayers.forEach((player) => {
        insertPlayersHere.innerHTML += `
          <label class="modal-players-item">
            ${player.nameFirst} ${player.nameLast}
            <input type="checkbox" name="player" value="${player.playerID}"/>
          </label>
        `;
      });

      // add primary player to chosenPlayers array
      chosenPlayers.push(primaryPlayerObject);
      // just in case no further players are chosen
      localStorage.setItem('chosenPlayers', JSON.stringify(chosenPlayers));

      // send it along
      roundSetup.managePlayersModal(availablePlayers, primaryPlayerObject);
    }, // end buildPlayersModal

    managePlayersModal(availablePlayers, primaryPlayerObject) {
      
      //  the main event, clicking on the modal footer
      playersFooter.addEventListener('click', (event) => {

        // grabbing all the playerCheckboxes
        // bc they were created post-load
        let playerCheckboxes = document.querySelectorAll("input[type='checkbox']");

        // which "button" was clicked
        let action = event.target.closest('svg').getAttribute('data-action');

        switch (action) {
          case 'close':
            playersModal.close();
          break;
          // the big kahuna
          case 'save':

            // find the players from the checked boxes nodeList
              for (let i = 0; i < playerCheckboxes.length; i++) {

                // test state of playerCheckboxes
                if (playerCheckboxes[i].checked == true) {

                  // create the data
                  let checkedPlayerID = playerCheckboxes[i].value;
                  let checkedPlayerObject = availablePlayers.find(x => x.playerID === checkedPlayerID);
    
                  // push checked player into the array
                  chosenPlayers.push(checkedPlayerObject);
                } else { // find the players from the un-checked boxes

                  // create the data
                  let unCheckedPlayerID = playerCheckboxes[i].value;
                  let unCheckedPlayerObject = availablePlayers.find(x => x.playerID === unCheckedPlayerID);
                  
                  // remove un-checked player from array
                  chosenPlayers.forEach((item, index) => {
                    if (item.playerID == unCheckedPlayerID) {
                      chosenPlayers.splice(index, 1);
                    };
                  });
                }; // end if-else
              }; // end for...

            // just in case there's any duplication due to monkey running
            chosenPlayers = chosenPlayers.filter((obj, index) => {
              return index === chosenPlayers.findIndex(o => obj.playerID === o.playerID)
            });
           
            // clearing display slot for re-populating
            playerDisplaySlot.innerText = ''
            // update players display slot on page with accurate list of players
            chosenPlayers.forEach((item) => {
                playerDisplaySlot.innerText += ` ${item.nameFirst }`;
            });

            // then save to localStorage
            localStorage.setItem('chosenPlayers', JSON.stringify(chosenPlayers));
            // then close modal
            playersModal.close();
          break; // end big kahuna
          default:
          break;
        };
      });
    }, // end managePlayersModal()
  }; // end roundSetup{}

  roundSetup.init();

  function assembleFinalData() {

    submitButton.addEventListener('click', (event) => {

      async function getChosenData() {
        const chosenPlayers = await JSON.parse(localStorage.getItem('chosenPlayers'));
        const course = await JSON.parse(localStorage.getItem('chosenCourse'));
        return [chosenPlayers, course];
      };

      getChosenData().then(data => {
        let players = data[0];
        let course = data[1];

        if (course == null) {

          errorMessage.classList.toggle('selections-course-error-show');

        } else {

          for (let i = 0; i < players.length; i++) {
            // add course meta for round saves
            players[i].courseName = course.courseName;
            players[i].courseID = course.courseID;
            // add course holes for scorekeeping purposes
            players[i].courseHoles = course.courseHoles;
          }; // end for loop
  
          // re-save players new data
          localStorage.setItem('chosenPlayers', JSON.stringify(players));

          // off to the show
            setTimeout(() => {
              window.location.href = '/pages/roundscoring.html';
            }, 500);
        };
      }); // end .then
    }); // end eventlistener()
  }; // end assembleFinalData()
  assembleFinalData();
})();